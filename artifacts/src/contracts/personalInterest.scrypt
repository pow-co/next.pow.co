
contract PersonalInterest {
  PubKey owner;
  bytes topic;
  @state int weight;
  constructor(bytes topic, PubKey owner, int weight) {
    this.topic = topic;
    this.owner = owner;
    this.weight = weight;
  }
  public function setWeight(int weight, Sig signature, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    require(checkSig(signature, this.owner));
    this.weight = weight;
    int amount = SigHash.value(__scrypt_ts_txPreimage);
    bytes outputs = this.buildStateOutput(amount);
    if(__scrypt_ts_changeAmount > 0) {
        outputs += (__scrypt_ts_changeAmount > 0 ? Utils.buildOutput(Utils.buildPublicKeyHashScript(__scrypt_ts_changeAddress), __scrypt_ts_changeAmount) : b'');
      }
    require(SigHash.hashOutputs(__scrypt_ts_txPreimage) == hash256(outputs));
  }
  public function remove(Sig signature) {
    require(checkSig(signature, this.owner));
  }
    function buildStateOutput(int amount): bytes {
      bytes script = this.getStateScript();
      return Utils.buildOutput(script, amount);
    }
}